// source: state_service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.escrow.ChannelStateReply', null, global);
goog.exportSymbol('proto.escrow.ChannelStateRequest', null, global);
goog.exportSymbol('proto.escrow.FreeCallStateReply', null, global);
goog.exportSymbol('proto.escrow.FreeCallStateRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.escrow.ChannelStateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.escrow.ChannelStateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.escrow.ChannelStateRequest.displayName = 'proto.escrow.ChannelStateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.escrow.ChannelStateReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.escrow.ChannelStateReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.escrow.ChannelStateReply.displayName = 'proto.escrow.ChannelStateReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.escrow.FreeCallStateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.escrow.FreeCallStateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.escrow.FreeCallStateRequest.displayName = 'proto.escrow.FreeCallStateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.escrow.FreeCallStateReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.escrow.FreeCallStateReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.escrow.FreeCallStateReply.displayName = 'proto.escrow.FreeCallStateReply';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.escrow.ChannelStateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.escrow.ChannelStateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.escrow.ChannelStateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.ChannelStateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelId: msg.getChannelId_asB64(),
    signature: msg.getSignature_asB64(),
    currentBlock: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.escrow.ChannelStateRequest}
 */
proto.escrow.ChannelStateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.escrow.ChannelStateRequest;
  return proto.escrow.ChannelStateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.escrow.ChannelStateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.escrow.ChannelStateRequest}
 */
proto.escrow.ChannelStateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChannelId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCurrentBlock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.escrow.ChannelStateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.escrow.ChannelStateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.escrow.ChannelStateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.ChannelStateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getCurrentBlock();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional bytes channel_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.escrow.ChannelStateRequest.prototype.getChannelId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes channel_id = 1;
 * This is a type-conversion wrapper around `getChannelId()`
 * @return {string}
 */
proto.escrow.ChannelStateRequest.prototype.getChannelId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChannelId()));
};


/**
 * optional bytes channel_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChannelId()`
 * @return {!Uint8Array}
 */
proto.escrow.ChannelStateRequest.prototype.getChannelId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChannelId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.escrow.ChannelStateRequest} returns this
 */
proto.escrow.ChannelStateRequest.prototype.setChannelId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.escrow.ChannelStateRequest.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.escrow.ChannelStateRequest.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.escrow.ChannelStateRequest.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.escrow.ChannelStateRequest} returns this
 */
proto.escrow.ChannelStateRequest.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint64 current_block = 3;
 * @return {number}
 */
proto.escrow.ChannelStateRequest.prototype.getCurrentBlock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.escrow.ChannelStateRequest} returns this
 */
proto.escrow.ChannelStateRequest.prototype.setCurrentBlock = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.escrow.ChannelStateReply.prototype.toObject = function(opt_includeInstance) {
  return proto.escrow.ChannelStateReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.escrow.ChannelStateReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.ChannelStateReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    currentNonce: msg.getCurrentNonce_asB64(),
    currentSignedAmount: msg.getCurrentSignedAmount_asB64(),
    currentSignature: msg.getCurrentSignature_asB64(),
    oldNonceSignedAmount: msg.getOldNonceSignedAmount_asB64(),
    oldNonceSignature: msg.getOldNonceSignature_asB64(),
    plannedAmount: jspb.Message.getFieldWithDefault(msg, 6, 0),
    usedAmount: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.escrow.ChannelStateReply}
 */
proto.escrow.ChannelStateReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.escrow.ChannelStateReply;
  return proto.escrow.ChannelStateReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.escrow.ChannelStateReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.escrow.ChannelStateReply}
 */
proto.escrow.ChannelStateReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCurrentNonce(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCurrentSignedAmount(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCurrentSignature(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOldNonceSignedAmount(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOldNonceSignature(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPlannedAmount(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUsedAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.escrow.ChannelStateReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.escrow.ChannelStateReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.escrow.ChannelStateReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.ChannelStateReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrentNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCurrentSignedAmount_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getCurrentSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getOldNonceSignedAmount_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getOldNonceSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getPlannedAmount();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getUsedAmount();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
};


/**
 * optional bytes current_nonce = 1;
 * @return {!(string|Uint8Array)}
 */
proto.escrow.ChannelStateReply.prototype.getCurrentNonce = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes current_nonce = 1;
 * This is a type-conversion wrapper around `getCurrentNonce()`
 * @return {string}
 */
proto.escrow.ChannelStateReply.prototype.getCurrentNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCurrentNonce()));
};


/**
 * optional bytes current_nonce = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCurrentNonce()`
 * @return {!Uint8Array}
 */
proto.escrow.ChannelStateReply.prototype.getCurrentNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCurrentNonce()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.escrow.ChannelStateReply} returns this
 */
proto.escrow.ChannelStateReply.prototype.setCurrentNonce = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes current_signed_amount = 2;
 * @return {!(string|Uint8Array)}
 */
proto.escrow.ChannelStateReply.prototype.getCurrentSignedAmount = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes current_signed_amount = 2;
 * This is a type-conversion wrapper around `getCurrentSignedAmount()`
 * @return {string}
 */
proto.escrow.ChannelStateReply.prototype.getCurrentSignedAmount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCurrentSignedAmount()));
};


/**
 * optional bytes current_signed_amount = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCurrentSignedAmount()`
 * @return {!Uint8Array}
 */
proto.escrow.ChannelStateReply.prototype.getCurrentSignedAmount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCurrentSignedAmount()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.escrow.ChannelStateReply} returns this
 */
proto.escrow.ChannelStateReply.prototype.setCurrentSignedAmount = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes current_signature = 3;
 * @return {!(string|Uint8Array)}
 */
proto.escrow.ChannelStateReply.prototype.getCurrentSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes current_signature = 3;
 * This is a type-conversion wrapper around `getCurrentSignature()`
 * @return {string}
 */
proto.escrow.ChannelStateReply.prototype.getCurrentSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCurrentSignature()));
};


/**
 * optional bytes current_signature = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCurrentSignature()`
 * @return {!Uint8Array}
 */
proto.escrow.ChannelStateReply.prototype.getCurrentSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCurrentSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.escrow.ChannelStateReply} returns this
 */
proto.escrow.ChannelStateReply.prototype.setCurrentSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes old_nonce_signed_amount = 4;
 * @return {!(string|Uint8Array)}
 */
proto.escrow.ChannelStateReply.prototype.getOldNonceSignedAmount = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes old_nonce_signed_amount = 4;
 * This is a type-conversion wrapper around `getOldNonceSignedAmount()`
 * @return {string}
 */
proto.escrow.ChannelStateReply.prototype.getOldNonceSignedAmount_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOldNonceSignedAmount()));
};


/**
 * optional bytes old_nonce_signed_amount = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOldNonceSignedAmount()`
 * @return {!Uint8Array}
 */
proto.escrow.ChannelStateReply.prototype.getOldNonceSignedAmount_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOldNonceSignedAmount()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.escrow.ChannelStateReply} returns this
 */
proto.escrow.ChannelStateReply.prototype.setOldNonceSignedAmount = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes old_nonce_signature = 5;
 * @return {!(string|Uint8Array)}
 */
proto.escrow.ChannelStateReply.prototype.getOldNonceSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes old_nonce_signature = 5;
 * This is a type-conversion wrapper around `getOldNonceSignature()`
 * @return {string}
 */
proto.escrow.ChannelStateReply.prototype.getOldNonceSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOldNonceSignature()));
};


/**
 * optional bytes old_nonce_signature = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOldNonceSignature()`
 * @return {!Uint8Array}
 */
proto.escrow.ChannelStateReply.prototype.getOldNonceSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOldNonceSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.escrow.ChannelStateReply} returns this
 */
proto.escrow.ChannelStateReply.prototype.setOldNonceSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional uint64 planned_amount = 6;
 * @return {number}
 */
proto.escrow.ChannelStateReply.prototype.getPlannedAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.escrow.ChannelStateReply} returns this
 */
proto.escrow.ChannelStateReply.prototype.setPlannedAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 used_amount = 7;
 * @return {number}
 */
proto.escrow.ChannelStateReply.prototype.getUsedAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.escrow.ChannelStateReply} returns this
 */
proto.escrow.ChannelStateReply.prototype.setUsedAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.escrow.FreeCallStateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.escrow.FreeCallStateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.escrow.FreeCallStateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.FreeCallStateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tokenForFreeCall: msg.getTokenForFreeCall_asB64(),
    tokenExpiryDateBlock: jspb.Message.getFieldWithDefault(msg, 3, 0),
    signature: msg.getSignature_asB64(),
    currentBlock: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.escrow.FreeCallStateRequest}
 */
proto.escrow.FreeCallStateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.escrow.FreeCallStateRequest;
  return proto.escrow.FreeCallStateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.escrow.FreeCallStateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.escrow.FreeCallStateRequest}
 */
proto.escrow.FreeCallStateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTokenForFreeCall(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTokenExpiryDateBlock(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCurrentBlock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.escrow.FreeCallStateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.escrow.FreeCallStateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.escrow.FreeCallStateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.FreeCallStateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTokenForFreeCall_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getTokenExpiryDateBlock();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getCurrentBlock();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.escrow.FreeCallStateRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.escrow.FreeCallStateRequest} returns this
 */
proto.escrow.FreeCallStateRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes token_for_free_call = 2;
 * @return {!(string|Uint8Array)}
 */
proto.escrow.FreeCallStateRequest.prototype.getTokenForFreeCall = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes token_for_free_call = 2;
 * This is a type-conversion wrapper around `getTokenForFreeCall()`
 * @return {string}
 */
proto.escrow.FreeCallStateRequest.prototype.getTokenForFreeCall_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTokenForFreeCall()));
};


/**
 * optional bytes token_for_free_call = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTokenForFreeCall()`
 * @return {!Uint8Array}
 */
proto.escrow.FreeCallStateRequest.prototype.getTokenForFreeCall_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTokenForFreeCall()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.escrow.FreeCallStateRequest} returns this
 */
proto.escrow.FreeCallStateRequest.prototype.setTokenForFreeCall = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint64 token_expiry_date_block = 3;
 * @return {number}
 */
proto.escrow.FreeCallStateRequest.prototype.getTokenExpiryDateBlock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.escrow.FreeCallStateRequest} returns this
 */
proto.escrow.FreeCallStateRequest.prototype.setTokenExpiryDateBlock = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes signature = 4;
 * @return {!(string|Uint8Array)}
 */
proto.escrow.FreeCallStateRequest.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes signature = 4;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.escrow.FreeCallStateRequest.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.escrow.FreeCallStateRequest.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.escrow.FreeCallStateRequest} returns this
 */
proto.escrow.FreeCallStateRequest.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional uint64 current_block = 5;
 * @return {number}
 */
proto.escrow.FreeCallStateRequest.prototype.getCurrentBlock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.escrow.FreeCallStateRequest} returns this
 */
proto.escrow.FreeCallStateRequest.prototype.setCurrentBlock = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.escrow.FreeCallStateReply.prototype.toObject = function(opt_includeInstance) {
  return proto.escrow.FreeCallStateReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.escrow.FreeCallStateReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.FreeCallStateReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    freeCallsAvailable: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.escrow.FreeCallStateReply}
 */
proto.escrow.FreeCallStateReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.escrow.FreeCallStateReply;
  return proto.escrow.FreeCallStateReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.escrow.FreeCallStateReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.escrow.FreeCallStateReply}
 */
proto.escrow.FreeCallStateReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFreeCallsAvailable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.escrow.FreeCallStateReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.escrow.FreeCallStateReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.escrow.FreeCallStateReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.escrow.FreeCallStateReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFreeCallsAvailable();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.escrow.FreeCallStateReply.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.escrow.FreeCallStateReply} returns this
 */
proto.escrow.FreeCallStateReply.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 free_calls_available = 2;
 * @return {number}
 */
proto.escrow.FreeCallStateReply.prototype.getFreeCallsAvailable = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.escrow.FreeCallStateReply} returns this
 */
proto.escrow.FreeCallStateReply.prototype.setFreeCallsAvailable = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


goog.object.extend(exports, proto.escrow);
